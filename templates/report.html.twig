{% extends 'base.html.twig' %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="container">
        <h1>Course Report</h1>
        <div class="image-container">
            <img src="{{ asset('images/report-cover.jpeg') }}" alt="Report Cover">
        </div>
        <br>

        <nav>
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom10">Kmom10</a></li>
            </ul>
        </nav>

        <section id="kmom01">
            <h2>Kmom01</h2>
            
            <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
            <p>
                När det gäller objektorientering så har jag läst ungefär 100 böcker kring programmering och datavetenskap senaste året, många av vilka inkluderade kapitel om objektorientering.
                Utöver detta har jag försökt applicera objektorientering i de projekt jag skrivit för egen användning i Python.
                Sedan har objektorientering applicerats under de olika kurserna som jag har tagit.
            </p>
            
            <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
            <p>
                Det man behöver känna till är väl det generella att en klass är ett recept för objekt och ett objekt är en instans av en klass.
                En klass kan ha attribut och metoder där attribut innehåller värden och metoder innehåller processer/beteenden.
                Man bör väl också känna till skillnaden och innebörden av publika och privata attribut/metoder.
                T.ex. att man vill hålla sig till privata så mycket som möjligt. Eftersom att externa användare av en klass blir beroende på klassens publika metoder/attribut och dessa är inga man kan kontrollera. Så det är viktigt att det som är publikt har en låg sannolikhet att behöva förändras.
            </p>
            
            <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
            <p>
                Personligen så gillar jag att minimera externa dependencies, och gillar därför språk som t.ex. Python med ett rejält basbibliotek där man kan utveckla väldigt mycket utan att behöver comitta till ett specifikt framework.
                Jag blir lite nervös av en massa mappar och filer som genereras av ramverk, i alla fall om det är ett personligt projekt som jag vet att jag kommer jobba på i månader/år framöver.
                Men i slutändan går det inte att undvika vid utveckling av komplicerade webbappar tänker jag.
                Men gällande kodbasen för denna uppgift så är den än så länge indelad i Controller och View (templates mappen). Dock så finns det väl inte riktigt en separat Model-del än så länge.
                Jag ser fram emot att arbeta med MVC-modellen i kursen då jag försökt applicera tänket för ett interface för ett av mina personliga projekt.
            </p>
            
            <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
            <p>
                När det gäller strategi så tycker jag att SOLID är intressant och vill bli duktig på att förstå och applicera dessa principer.
            </p>
            
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>
                TIL för denna kmom är att komma igång med ett Symphony projekt med MVC-design (dock utan Model än så länge).
            </p>
        </section>

        <section id="kmom02">
            <h2>Kmom02</h2>
                <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
                    <p>
                        Arv fungerar så att en subklass ärver metoder och attribut från en superklass. PHP nyttjar single inheritance snarare än multiple inheritance. Vid komposition så "har" en klass en annan klass medans en klass "är" också en annan klass vid arv (t.ex. subklassen chihuahua är superklassen hund medans en hund, alltså superklassen, har ben, alltså komposition). Man kan också dela in composition i typer, t.ex. komposition (ena klassen fungerar inte utan den andra) och aggregering (de funkar ihop men kan existera separat).
                        När det gäller begreppet "interface" så har jag ganska länge försökt förstå detta begrepp. En definition av begreppet är ungefär att en klass interface består av de publika metoder/attribut som en klass har, och ibland specifikt de som är definierade av en klass abstrakta basklass. Den senare kan likställas med ett "kontrakt" som klassen efterlever (etablerandet av kontraktet är just syftet med den abstrakta klassen, vilken inte innehåller konkreta implementeringar/implementationsdetaljer).
                        Vad som fortfarande är lite otydligt för mig är om en metods parametrar är den metodens "interface", eller om termen inte används på det sättet.
                        Man kan väl möjligtvis säga då att interface i en bredare betydelse är det som ett objekt visar utåt (parametrar, metoder, attribut), ungefär som celler i kroppen har vissa "tillåtna" sätt att interface:a med cellen som t.ex. vissa virus utnyttjar.
                        Traits vet jag inte om jag förstått men det låter som "mixins" ungefär, alltså någonting som kan användas för att förlänga en klass med metoder. Likt mixins så verkar traits inte kunna existera självständigt. Båda är i alla fall flexibla sätt att "extend:a" (förlänga) klasser med metoder.
                    </p>
                <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
                    <p>

                    </p>
                <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
                    <p>

                    </p>
                <h3>Vilken är din TIL för detta kmom?</h3>
        </section>

        <section id="kmom03">
            <h2>Kmom03</h2>
            <!-- -->
        </section>

        <section id="kmom04">
            <h2>Kmom04</h2>
            <!-- -->
        </section>

        <section id="kmom05">
            <h2>Kmom05</h2>
            <!-- -->
        </section>

        <section id="kmom06">
            <h2>Kmom06</h2>
            <!-- -->
        </section>

        <section id="kmom10">
            <h2>Kmom10</h2>
            <!-- -->
        </section>
    </div>
{% endblock %}
