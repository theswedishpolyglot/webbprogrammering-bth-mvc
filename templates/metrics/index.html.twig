{% extends 'base.html.twig' %}

{% block title %}Analys av metrics{% endblock %}

{% block body %}
    <h1>Analys av metrics</h1>
    <h2>Introduktion</h2>
        <h3>7C</h3>
        <i>Börja med en rubrik “Introduktion” där du förklarar de sex C:na och hur de kan påverka kodens kvalitet. Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.</i>
        <p>Intro till 7C:n.</p>
        <h3>Codestyle</h3>
        <p>

        </p>
        <h3>Coverage</h3>
        <p>

        </p>
        <h3>Complexity</h3>
        <p>

        </p>
        <h3>Cohesion</h3>
        <p>

        </p>
        <h3>Coupling</h3>
        <p>

        </p>
        <h3>CRAP</h3>
        <p>

        </p>
        <h3>Code smell</h3>
        <p>

        </p>


    <h2>PHPMetrics</h2>
    <i>Skapa en rubrik “Phpmetrics” och analysera dess rapport för din kod. Använd mätvärdena för att hitta flaskhalsar och svaga punkter i din kod (minst 3 stycken). Du vill hitta kod som har förbättringspotential. Visualisera med någon representativ bild från rapporten. I ovan analys så kopplar du dina “findings” till 6C. Använd gärna något ytterligare mättal som du finner relevant och intressant.</i>
    <p>placeholder</p>

    <h2>Scrutinizer</h2>
    <i>
        Skapa en rubrik “Scrutinizer” och analysera dess rapport för din kod. Gör på samma sätt som du gjorde med Phpmetrics.
        Inkludera klickbara Scrutinizer badges i din rapport för build, coverage och quality.
        Placera samma badges i din README.md.
        I ovan analys så kopplar du dina “findings” till 6C. Använd gärna något ytterligare mättal som du finner relevant och intressant.
    </i>
    <p>placeholder</p>

    <h2>Förbättringar</h2>
    <i>
        Skapa en ny rubrik “Förbättringar” där du väljer minst 3 förbättringar som du vill göra med din kod (gärna fler).

Exempel på förbättringar kan vara:

Fixa issues
Öka kodtäckning
Fokusera på kvalitetsindex i Scrutinizer
Minska komplexiteten i class/metod
Börja med att skriva om förbättringarna, vad du tänker göra, varför du väljer dem och hur du tror det kommer påverka mätvärdena för kvalitet.

Implementera sedan förbättringarna.
Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.
Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.

    </i>
    <p>placeholder</p>

    <h2>Discussion</h2>
    <p>placeholder</p>
        <h3>Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?</h3>
        <p>
            
        </p>
        <h3>Finns det fördelar och kanske nackdelar?</h3>
        <p>
            
        </p>
        <h3>Ser du andra möjligheter att jobba mot “clean code”?</h3>
        <p>

        </p>
{% endblock %}
