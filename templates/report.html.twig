{% extends 'base.html.twig' %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="container">
        <h1>Course Report</h1>
        <div class="image-container">
            <img src="{{ asset('images/report-cover.jpeg') }}" alt="Report Cover">
        </div>
        <br>

        <nav>
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom10">Kmom10</a></li>
            </ul>
        </nav>

        <section id="kmom01">
            <h2>Kmom01</h2>
            
            <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
            <p>
                När det gäller objektorientering så har jag läst ungefär 100 böcker kring programmering och datavetenskap senaste året, många av vilka inkluderade kapitel om objektorientering.
                Utöver detta har jag försökt applicera objektorientering i de projekt jag skrivit för egen användning i Python.
                Sedan har objektorientering applicerats under de olika kurserna som jag har tagit.
            </p>
            
            <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
            <p>
                Det man behöver känna till är väl det generella att en klass är ett recept för objekt och ett objekt är en instans av en klass.
                En klass kan ha attribut och metoder där attribut innehåller värden och metoder innehåller processer/beteenden.
                Man bör väl också känna till skillnaden och innebörden av publika och privata attribut/metoder.
                T.ex. att man vill hålla sig till privata så mycket som möjligt. Eftersom att externa användare av en klass blir beroende på klassens publika metoder/attribut och dessa är inga man kan kontrollera. Så det är viktigt att det som är publikt har en låg sannolikhet att behöva förändras.
            </p>
            
            <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
            <p>
                Personligen så gillar jag att minimera externa dependencies, och gillar därför språk som t.ex. Python med ett rejält basbibliotek där man kan utveckla väldigt mycket utan att behöver comitta till ett specifikt framework.
                Jag blir lite nervös av en massa mappar och filer som genereras av ramverk, i alla fall om det är ett personligt projekt som jag vet att jag kommer jobba på i månader/år framöver.
                Men i slutändan går det inte att undvika vid utveckling av komplicerade webbappar tänker jag.
                Men gällande kodbasen för denna uppgift så är den än så länge indelad i Controller och View (templates mappen). Dock så finns det väl inte riktigt en separat Model-del än så länge.
                Jag ser fram emot att arbeta med MVC-modellen i kursen då jag försökt applicera tänket för ett interface för ett av mina personliga projekt.
            </p>
            
            <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
            <p>
                När det gäller strategi så tycker jag att SOLID är intressant och vill bli duktig på att förstå och applicera dessa principer.
            </p>
            
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>
                TIL för denna kmom är att komma igång med ett Symphony projekt med MVC-design (dock utan Model än så länge).
            </p>
        </section>

        <section id="kmom02">
            <h2>Kmom02</h2>
                <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
                    <p>
                        Arv fungerar så att en subklass ärver metoder och attribut från en superklass. PHP nyttjar single inheritance snarare än multiple inheritance. Vid komposition så "har" en klass en annan klass medans en klass "är" också en annan klass vid arv (t.ex. subklassen chihuahua är superklassen hund medans en hund, alltså superklassen, har ben, alltså komposition). Man kan också dela in composition i typer, t.ex. komposition (ena klassen fungerar inte utan den andra) och aggregering (de funkar ihop men kan existera separat).
                        När det gäller begreppet "interface" så har jag ganska länge försökt förstå detta begrepp. En definition av begreppet är ungefär att en klass interface består av de publika metoder/attribut som en klass har, och ibland specifikt de som är definierade av en klass abstrakta basklass. Den senare kan likställas med ett "kontrakt" som klassen efterlever (etablerandet av kontraktet är just syftet med den abstrakta klassen, vilken inte innehåller konkreta implementeringar/implementationsdetaljer).
                        Vad som fortfarande är lite otydligt för mig är om en metods parametrar är den metodens "interface", eller om termen inte används på det sättet.
                        Man kan väl möjligtvis säga då att interface i en bredare betydelse är det som ett objekt visar utåt (parametrar, metoder, attribut), ungefär som celler i kroppen har vissa "tillåtna" sätt att interface:a med cellen som t.ex. vissa virus utnyttjar.
                        Traits vet jag inte om jag förstått men det låter som "mixins" ungefär, alltså någonting som kan användas för att förlänga en klass med metoder. Likt mixins så verkar traits inte kunna existera självständigt. Båda är i alla fall flexibla sätt att "extend:a" (förlänga) klasser med metoder.
                    </p>
                <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
                    <p>
                        Jag implementerade tre klasser: Card som representerar ett enskilt kort, varje med en färg ("suit") och värde. DeckOfCards representerar en kortlek och har diverse metoder för att initialisera/ställa om, blanda, dra, sortera etc. Slutligen har jag en klass CardHand som representerar handen med de dragna korten.
                        I CardController så implementerar jag rutter för deck, shuffle, draw och draw_multiple. Jag skapar metod ensureDeckExists för återanvändning av initialiseringslogik.
                        Jag implementerar session och session/delete rutter för lättare debugging. Jag lägger till alla rutter till en Card Game-sida, vilken fungerar som en landningssida. Jag skapar ett UML-diagram med PlantUML och beskriver klasserna på landningssidan.
                        Jag implementerar diverse saker såsom t.ex. en inputruta där man kan välja antal kort man vill dra.
                        Jag går vidare till andra sektionen av krav och implementerar en JsonApiController som innehåller rutter för deck, shuffle, draw och draw_multiple för API-landningssidan.
                        Jag ser till att förändringar via API och Card Game-sidan båda fungerar bra med session och visar sina uppdateringar på Session-sidan.
                        När det gäller förbättringar så tänker jag dels tester, för att minimera manuell testning (blir viktigare ju större projekten blir, hur mer saker är couplat etc.).
                        Jag kanske också bör convertera tillbaka till textbeskrivningen av "färgerna" vid API-requests istället för att visa UTF-8 koden för "färgen".
                        Hade väl varit coolt att implementera någon animation när man drar kort, som flyttar korten ner till "Previously Drawn Cards".
                    </p>
                <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
                    <p>
                        Jag tycker Symfony ger en ganska tydlig struktur och arbetssätt enligt MVC. När projektet väl är uppe så fungerar det, men det känns som att det är många detaljer (många config-ställen, externa dependencies etc.), jämfört med t.ex. att starta ett Django-projekt enligt MVC (dock har jag inte full insikt i Django ännu så kan vara en överdrift).
                        Jag tyckte det var lite jobbigt med debugging än så länge, men det finns ju dev.log filen man kan logga till samt flashmeddelanden osv.
                    </p>
                <h3>Vilken är din TIL för detta kmom?</h3>
                    <p>
                        Att hantera session i Symfony, specifikt hålla ett konsekvent "state" över flera interaktioner. Vidare intressant med JSON-API, vilket är lovande för framtida appliceringar i olika sammanhang. 
                        Jag funderar på om dessa är REST-ful, om inte annat vill jag lära mig att skapa REST-ful API:er så man kan t.ex. ha en backend med olika frontends (mobilapp, webb etc.)
                    </p>
        </section>

        <section id="kmom03">
            <h2>Kmom03</h2>
            <h3>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h3>
                <p>
                    Jag tycker det är bra för att få en idé kring hur logiken kan se ut i slutändan men samtidigt att man bör nog förhålla sig lite flexibelt till sin planering, eftersom det kan komma upp saker man inte tänkt på i förväg och så vidare. Jag tänker att man kan se det som att man etablerar en arbetshypotes kring en fungerande implementering som man sedan testar och itererar på om nödvändigt.
                    Jag tänker att det kan också sänka den upplevda kognitiva belastningen i stunden för att man har ett extern kognitivt stöd (diagram, lista på klasser/metoder, implementeringslogik/psuedokod etc.) som man kan hänvisa till.
                </p>
            <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h3>
                <p>
                    Jag började med att lägga till landningssidan och placeholder templates för doc, home (landningssida), start (dit man kommer om man klickar starta spel) samt ordnade jag en grundläggande GameController.
                    Sedan genomförde jag problemlösningskravet. 
                    I nästa steg så implementerade jag klasserna som definierats i problemlösningssteget, alltså Bank, Game och Player. Jag använde tidigare implementerade klasser Card, CardHand och DeckOfCards.
                    Game-klassen hanterar spelflödet. Player-klassen representerar en spelare och hanterar dennes hand och handlingar. Bank-klassen hanterar banken, dennes kort samt dennes handlingar. 
                    Jag uppdaterade CardHand att hantera ess enligt tjugoett-reglerna. Jag skapade play och result templates som visas under spelet respektive när spelet är slut.
                    Jag är rätt nöjd med indelningen i de klasser jag har.
                    Jag hade kunnat förbättra själva stylingen/gränssnittet till att se lite mer tilltalande ut.
                    Jag tycker att serialiseringslösningen/konvertering till och från array blev lite väl komplicerad och hade kunnat refaktorisera detta till att bli enklare så att förlängning av kodbasen blir lättare i en (hypotetisk) vidareutveckling av applikationen.
                </p>
            <h3>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
                <p>
                    Det finns saker jag gillar och gillar mindre. Det jag gillar är att det finns en tydlig indelning i templates, Entity, Controller, public/assets, tools osv. Alltså att det underlättar och uppmuntrar till ett arkitekturtänk. Jag tycker fortfarande att debugging i Symfony är lite jobbigt.
                </p>
            <h3>Vilken är din TIL för detta kmom?</h3>
                <p>
                    TIL för detta kmom är nog ökad insikt i nyttan av planering i form av flödesdiagram, klasslistor, psuedokod med mera.
                </p>
        </section>

        <section id="kmom04">
            <h2>Kmom04</h2>
            <!-- -->
        </section>

        <section id="kmom05">
            <h2>Kmom05</h2>
            <!-- -->
        </section>

        <section id="kmom06">
            <h2>Kmom06</h2>
            <!-- -->
        </section>

        <section id="kmom10">
            <h2>Kmom10</h2>
            <!-- -->
        </section>
    </div>
{% endblock %}
